ВВЕДЕНИЕ
(пока пустое)
Анализ проблем и их актуальности
 
ГЛАВА 1. АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ
Для успешного решения задачи построения универсальной системы онлайн очереди, в первую очередь, необходимо провести анализ существующих методов организации очередей и анализа алгоритмов ранжирования пользователей с целью выявления наиболее подходящей технологии. Разработка универсального алгоритма для составления очереди является комплексной задачей, которую в общем случае можно представить в виде следующей последовательности этапов: анализ требований и возможностей, проектирование системы, разработка алгоритмов, тестирование и оптимизация. В данной главе определены общие положения и проблемы существующих систем, представлены основные существующие способы решения на каждой из упомянутых стадий, а также принято решение о выборе наиболее подходящего из методов.
1.1.	Обзор существующих систем онлайн очередей
Анализ существующих систем и их особенностей    
Сравнение различных подходов к организации онлайн очередей  
Проведем анализ ряда систем управления очередями, существующих на момент 2023 года, и рассмотрим их особенности и подходы к организации онлайн очередей.
1.1.1.	Онлайн очередь МАКСИМ
Для российского рынка достаточно давно представлено решение в виде онлайн очереди МАКСИМ от компании «МТГ. Бизнес-решения», которая уже используется во многих государственных учреждениях, например, таких как, ФНС, МФЦ, во многих банках и т.д.
Эта система принесла несколько преимуществ, сделав бизнес-процессы обслуживания более эффективными и автоматизированными. Она охватывает все этапы обслуживания посетителей и обеспечивает сбор и обработку статистической информации. Благодаря этому система обеспечивает полный контроль и мониторинг работы отделений в режиме реального времени, а также гарантирует надежное и компактное хранение статистических данных. Она также обладает масштабируемостью и гибкостью.  
Одним из основных преимуществ данной системы является возможность обслуживания посетителей без ожидания в очереди. В реальной жизни часто возникают ситуации, когда необходимо сделать исключение из автоматического процесса обслуживания, например, при посещении приоритетных посетителей, таких как мамы с детьми, инвалиды или ветераны Великой Отечественной войны.  
Система электронной очереди МАКСИМА использует два вида приоритетов вызова посетителей: абсолютный и динамический. При абсолютном приоритете посетитель с признаком приоритета помещается в начало очереди и вызывается следующим. При динамическом приоритете каждому посетителю при регистрации в очереди присваивается рейтинг, определяющий его место в очереди ожидания обслуживания.  
Абсолютный приоритет используется для обслуживания клиентов, которым предоставляются привилегии или льготы по сравнению с остальными. Например, в банках это могут быть держатели карт Gold, а в поликлиниках – инвалиды, ветераны или пенсионеры. Посетитель с таким приоритетом вызывается к первому свободному оператору без ожидания в очереди. Однако, при большом количестве приоритетных клиентов время ожидания для обычных посетителей увеличивается, и некоторые из них могут даже уйти, не получив обслуживания.  
Когда возникают нештатные ситуации, система переходит на "ручное управление", информируя персонал о проблемах, связанных с длительным ожиданием определенных услуг и необходимостью ускорения процесса. Однако, если операторы находятся в одном зале с очередью, такая информация может вызвать только недовольство, не решая проблему.  
Для очередей, в которых присутствуют дети, настройка системы в режиме реального времени может быть неудобной, особенно без специалиста, знакомого с работой системы электронной очереди и ее настройкой. Поэтому в данной системе используется механизм динамических приоритетов или рейтингов. При регистрации посетителя в очереди ему присваивается определенный рейтинг, и система сравнивает его с рейтингом первого посетителя в очереди. Если рейтинги равны или рейтинг нового посетителя меньше, то новичок ставится в очередь после того, кто пришел раньше. Если же начальный рейтинг нового посетителя выше, то система помещает его в начало очереди, одновременно уменьшая его рейтинг на единицу и увеличивая рейтинг более раннего посетителя на эту же единицу.  
Такая система распределения посетителей в очереди обеспечивает справедливое обслуживание: чем больше человек пропускает впереди себя, тем выше его текущий рейтинг. Это означает, что после пропуска одного или двух посетителей он больше никого не пропустит, независимо от рейтинга нового посетителя, и будет обслужен раньше него.
1.1.2.	Qminder
Qminder - система управления очередями для организаций с большим потоком посетителей. Она интегрирована с устройствами Apple, предоставляя приложения для регистрации на iPad и ожидания на Apple TV. Однако в российских государственных учреждениях не используется Apple TV для отображения очереди, и не каждый имеет доступ к iPad для постановки в очередь.
Несмотря на ограничения, Qminder предлагает следующие особенности:
1.	Планирование встреч позволяет посетителям проверить пиковые часы и ожидаемое время входа в очередь.
2.	Управление очередью включает функции возврата в очередь, перенаправления в другую линию, повторного вызова и группового обслуживания.
3.	Сервисная аналитика позволяет определить пиковые часы, время ожидания, среднее число посещений в день, продолжительность обслуживания и историю посещений.
Функция "возврат в очередь" позволяет обработать ситуации, когда посетитель не откликается на вызов или не может быть обслужен. Вот несколько примеров:
1.	Посетитель не реагирует. Например, посетитель записался на услугу и ожидает очереди, но по какой-то причине не откликается на вызов (отошел на несколько минут или не услышал свое имя). Сотрудник может вернуть его в очередь и перейти к следующему. Посетитель остается в очереди и будет вызван снова.
2.	Невозможность обслужить посетителя. Например, нужен конкретный сотрудник или ресурс, но он временно недоступен. Посетитель может быть возвращен в очередь до доступности необходимого ресурса.
Эта функция обеспечивает эффективное управление очередью и лучшее обслуживание клиентов, предотвращая пропуск клиентов или ненужное ожидание.
1.2.	Анализ алгоритмов ранжирования
Обзор существующих алгоритмов ранжирования     
Анализ методов сокращения времени ожидания в очередях     
Сравнение эффективности различных алгоритмов  
Важным фактором в эффективности системы управления очередями является выбор алгоритма ранжирования. В данном разделе мы рассмотрим различные алгоритмы ранжирования, их особенности и способность сокращать время ожидания в очередях.  
Ранжирование в контексте управления очередями - это процесс определения порядка обслуживания клиентов. Существует несколько основных алгоритмов ранжирования, часто используемых в системах управления очередями:   
1.	Priority Queuing. В этом случае клиенты ранжируются в соответствии с определенным приоритетом. Приоритет может определяться различными факторами, такими как время ожидания, статус клиента или тип услуги. 
2.	Weighted Fair Queuing (WFQ). Этот алгоритм подразумевает, что клиенты с большим весом получают больше ресурсов. Вес может определяться на основе различных факторов, таких как важность клиента или сложность задачи.  
Очень сложно найти универсальный алгоритм для составления онлайн очереди, человек или рассмотренные выше примеры попросту не смогут учесть большое количество факторов, которые будут влиять на ранжирование пользователей в очереди. С этим должна справиться хорошо обученная нейронная сеть.
Нейронная сеть - это метод в искусственном интеллекте, который учит компьютеры обрабатывать данные таким же способом, как и человеческий МоЗГ. Это тип процесса машинного обучения, называемый глубоким обучением, который использует взаимосвязанные узлы или нейроны в слоистой структуре, напоминающей человеческий мозг.
Ранжирование машинного обучения - это применение машинного обучения (обычно контролируемого, полуконтролируемого или обучения с подкреплением) при построении моделей ранжирования для информационно-поисковых систем. Данные обучения состоят из списков элементов с частичным порядком между элементами в каждом списке. Этот порядок обычно получается путем присвоения каждому пункту числовой или исходной оценки или бинарного суждения (например, «релевантный» или «нерелевантный»). Целью моделей Learning-To-Rank (LTR) является ранжирование набора элементов-кандидатов для любого заданного поискового запроса в соответствии с критерием предпочтения.
Из наиболее популярных решений в этом направлении рассмотрим подходы sota-ranking алгоритмов, таких как PiRank, VNS-Rank, SetRank и Mulberry.
1.2.1.	Описание sota-ranking алгоритмов
SOTA - это аббревиатура от State-Of-The-Art. В контексте искусственного интеллекта (ИИ) это относится к лучшим моделям, которые могут быть использованы для достижения результатов в задаче, специфичной для ИИ. 
Основные преимущества:
1.	Повышает точность задачи. Прежде всего, нужно проверить, какие параметры определяют модель SOTA, такие как полнота, точность и площадь под кривой. Можно выбрать любую метрику. Затем можно определить ее значение SOTA для каждой выбранной метрики. Если эти метрики имеют высокую точность производительности (около 90%-95%), они помечены как SOTA. Эти модели очень точны. Так задачи ИИ максимально приближены к тому, что нужно делать пользователю;
2.	Повышает надежность. Как упоминалось выше, высокая точность модели SOTA также повышает надежность задач ИИ. Если это задача машинного обучения или задача глубокой нейронной сети, то результаты в значительной степени такие, какими они должны быть. Они надежны и не считаются случайным тестом;
3.	Обеспечивает воспроизводимость. Чтобы продукт искусственного интеллекта был гибким и экономичным, есть возможность быстро отправить минимально жизнеспособный продукт на тестирование клиентам. Затем можно перейти к получению отзывов пользователей и итеративному улучшению. Поэтому воспроизводимость в модели SOTA может считаться хорошей практикой. Это помогает с алгоритмическими компромиссами.
4.	Сокращает время генерации. Поскольку модель SOTA помогает в воспроизводимости алгоритма или продукта, она также помогает сэкономить время, когда весь процесс «ложится» на конвейерную ленту. Это означает, что можно сделать продаваемый продукт из прототипа за меньшее время, чем когда был сделано тот же продукт с нуля. Все, что нужно, это воспроизвести алгоритм на параметрах, на которых он должен быть протестирован, уже есть, так что да, вы экономите много времени при генерации продукта.
Ключевой проблемой, связанной с подходами машинного обучения к ранжированию, является разрыв между интересующими показателями производительности и суррогатными функциями потерь, которые могут быть оптимизированы с помощью методов, основанных на градиенте. Этот пробел возникает из-за того, что показатели ранжирования обычно включают операцию сортировки, которая не поддается дифференциации по параметрам модели.
Предпочтение перед элементами задается с помощью меток релевантности для каждого кандидата. Фундаментальная трудность LTR заключается в том, что интересующие нижестоящие показатели, такие как нормализованный дисконтированный совокупный выигрыш (NDCG) и средняя позиция релевантности (ARP), зависят от рангов, индуцируемых моделью. Эти ранги не дифференцируемы по отношению к параметрам модели, поэтому показатели не могут быть оптимизированы непосредственно с помощью методов, основанных на градиенте.
Чтобы решить вышеуказанную проблему, популярный класс LTR использует методы сопоставления элементов с вещественными оценками, а затем определяет суррогатные функции потерь, которые работают непосредственно с этими оценками. Суррогатные функции потери, в свою очередь, могут принадлежать к одному из трех типов. Модели LTR, оптимизированные с помощью точечных суррогатов, представляют ранжирование как проблему регрессии/классификации, в которой метки элементов задаются их индивидуальными метками релевантности. Такие подходы напрямую не учитывают какие-либо взаимозависимости между ранжированием.
Также рассмотрим какие подходы лежат в основе методов ранжирования. Это listwise и Pairwise подходы.
listwise-подход, когда оценивается все ранжирование целиком. Такие подходы не могут эффективно учитывать “связи” из-за предварительной перестановки всего списка;
Pairwise-подход — это попытка задать функцию отношения на множестве объектов. То есть, модель получает на вход два объекта и должна выдать вероятность того, что первый из них больше подходит пользователю, чем второй. Вообще говоря, при таком подходе мы не получаем математически выверенной операции, могут быть накладки в виде невыполнения ассоциативности, транзитивности или других свойств — методы обучения Pairwise модели не всегда гарантируют их соблюдение.
Однако, как показано на рисунке 1, если существуют пары предпочтений элемента “A>B” и “C>D” для пользователя 1, пары “A>D” и “C>B” также должны существовать для пользователя 1 из-за двоичного значения неявной обратной связи. Другими словами, мы имеем p (A> D, C> B | A> B, C> D) = 1 в практическом процессе построения пары, что нарушает независимость между парами и, таким образом, влияет на результат оптимизации потери по парам. 
 
Рис.1.1. Схематический набросок структур предпочтений в различных подходах к совместному ранжированию, где ”>” представляет порядок предпочтений
Рассмотрев преимущества и недостатки, виды подходов, теперь рассмотрим, что лежит в основе конкретных алгоритмов.
PiRank – алгоритм масштабируемого обучения ранжированию с помощью дифференцируемой сортировки. Это новый класс дифференцируемых суррогатов для ранжирования, которые используют непрерывную, контролируемую температурой релаксацию к оператору сортировки на основе сортировки по нейронной сети (NeuralSort). 
В основе PiRank лежит подход listwise, в котором оценки изучаются с помощью глубоких нейронных сетей, а суррогатные потери получаются с помощью дифференцируемой релаксации к оператору сортировки. В частности, мы выбираем в качестве строительного блока контролируемую температурой релаксацию NeuralSort для сортировки и специализируем ее для часто используемых показателей ранжирования, таких как NDCG и ARP. Конечная цель обучения для PiRank сводится к точной оптимизации метрики ранжирования в пределе нулевой температуры и компенсирует смещение для снижения дисперсии в оценках градиента при высокой температуре. Кроме того, PiRank масштабируется до реальных промышленных сценариев, где размер списков товаров очень велик, но интересующие показатели ранжирования определяются лишь небольшим набором товаров с наивысшим рейтингом. Масштабирование обеспечивается новой стратегией "разделяй и властвуй", похожей на сортировку слиянием, где мы рекурсивно применяем расслабление сортировки к вложенным спискам меньшего размера и распространяем только верхние элементы из каждого вложенного списка для дальнейшей сортировки.
Variable Neighbourhood Search for Learning to Rank Problem – listwise подход. Переменный поиск соседства в 2 новых методологиях в ИИ для обучения рангу.
VNS используется для оптимизации решений эвристических задач (задач, вызывающих познавательную активность). Решения основаны на систематических изменениях соседних решений. Изменения вносятся во время фазы возрастания для получения локального оптимума и фазы возмущения для получения глобальных оптимальных решений. Процедуры разведки и эксплуатации выполняются с использованием различных размеров шага мутации. Цель состоит в том, чтобы выбрать лучшее потомство для перехода к следующему эволюционирующему поколению. 
	Алгоритм поиска по переменной окрестности является разновидностью алгоритма локального поиска (LS). Но это преодолевает проблему застревания в локальных оптимальных решениях, с которой сталкивается LS. Он используется для достижения цели поиска глобальных оптимальных решений. Это может быть достигнуто путем более тщательного изучения различных решений окрестности с недетерминированными и нерегулярными размерами шагов в развивающихся итерациях. Чтобы найти локальный оптимум, для задач оптимизации использовались методы локального поиска. Они локально повторяют исходное решение, улучшая значение целевой функции каждый раз для получения локальных оптимальных решений. Это делается до тех пор, пока не будут сделаны дальнейшие улучшения после получения локальных оптимальных решений. Улучшенное решение x’ в окрестности N(x) текущего решения x может быть получено на каждой итерации. Примерами таких методов, которые были рассмотрены в других исследованиях для других проблемных областей, являются: генетические алгоритмы (GAs), эволюционные стратегии (ES), эволюционное программирование (EP) и эволюционные алгоритмы (EAs).
Более того, алгоритмы VNS ранее не использовались при решении задачи LTR.
SetRank – также listwise подход. Многомерная функция ранжирования перестановки, которая кодирует и ранжирует элементы с сетями самовнимания. По своей сути этот алгоритм учитывает характеристики неявной обратной связи в рекомендательной системе. В частности, SetRank нацелен на максимизацию апостериорной вероятности новых сравнений предпочтений по множеству и может быть реализован с помощью матричной факторизации и нейронных сетей.
Mulberry – это гибрид liswise и pairwise подходов. Изучает политики ранжирования, максимизирующие множество показателей по всему набору данных.


1.3.	Анализ требований к универсальной системе онлайн очереди
Определение ключевых требований к системе     
Анализ возможностей для индивидуализации очередей     
Оценка необходимых ресурсов для реализации системы  
1.4.	Выбор подхода и технологий для разработки системы
Обоснование выбора конкретного подхода к организации очереди     
Выбор технологий для реализации системы     
Планирование этапов разработки и внедрения системы  
1.5.	Заключение
Итоги анализа предметной области     
Подведение итогов выбора подхода и технологий     
Переход к следующей главе, посвященной детальному проектированию системы.
 
